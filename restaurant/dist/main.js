/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// home page with about blurb\n// menu page with menu object + food + beverage\n// json data file to generate food and beverage objects\n// food objects have: type, course, name, description, price\n// beverage objects have: type, style, name, description, price\n// contact page with fields and addresses\n\n// website object\n// displayController object\n// TODO make Order factory function shopping cart\n\nconst MenuController = () => {\n    const { collectConsumable, getFoodCollection } = Menu();\n    const { makeContainer } = MenuDisplay();\n\n    return { collectConsumable, getFoodCollection, makeContainer, }\n}\n\nconst MenuDisplay = () => {\n    const contentElement = document.querySelector('#content')\n    const makeContainer = (obj) => {\n        const containerElement = document.createElement('div');\n        containerElement.classList.add('consumable');\n        // const courseStarterElement =  document.createElement('div');\n        // courseStarterElement.classList.add('course');\n\n        const consumableNameElement = document.createElement('div');\n        const consumableDescriptionElement = document.createElement('div');\n        const consumablePriceElement = document.createElement('div');\n        // create a closure here?\n        // what functions go on the outside, what ones on the inside??\n        consumableNameElement.classList.add('name')\n        consumableDescriptionElement.classList.add('description')\n        consumablePriceElement.classList.add('price')\n\n        consumableNameElement.textContent = obj.getName()\n        consumableDescriptionElement.textContent = obj.getDescription();\n        consumablePriceElement.textContent = obj.getPrice();\n\n        containerElement.appendChild(consumableNameElement);\n        containerElement.appendChild(consumablePriceElement);\n        containerElement.appendChild(consumableDescriptionElement);\n\n        contentElement.appendChild(containerElement);\n\n        const contentPrime = containerElement.cloneNode(true)\n\n        const contentClassElement = document.querySelector('.content');\n        contentClassElement.appendChild(contentPrime);\n    }\n\n    return { makeContainer }\n}\n\nconst Menu = () => {\n    const foodCollection = [];\n    const beverageCollection = [];\n\n    const collectConsumable = (consumable) => {\n        if (consumable.getType === \"Food\") {\n            foodCollection.push(consumable)\n            console.log(\"Added consumable to foodCollection\")\n        } else if (consumable.getType === \"Beverage\") {\n            beverageCollection.push(consumable)\n            console.log(\"Added consumable to beverageCollection\")\n        } else {\n            console.warn('Consumable is not a Food or Beverage.')\n        }\n    }\n\n    const getFoodCollection = () => { return foodCollection }\n    const getBeverageCollection = () => { return beverageCollection }\n\n    return { collectConsumable, getFoodCollection, getBeverageCollection }\n};\n\nconst Consumable = (obj = {}) => {\n    const name = obj['name'];\n    const description = obj['description'];\n    const price = obj['price'];\n    const { getCourse } = Food(obj);\n    const { getStyle } = Beverage(obj);\n    let type;\n\n    const getName = () => { return name }\n    const getDescription = () => { return description }\n    const getPrice = () => { return price}\n    const _setType = (consumable) => {\n        if ( getCourse() !== void(0) && getStyle() === void(0)) {\n            return type = \"Food\";\n        } else if ( getStyle() !== void(0) && getCourse() === void(0)) {\n            return type = \"Beverage\";\n        } else {\n            throw TypeError(\"Consumable is not a Food or Beverage.\");\n        }\n    }\n\n    _setType(obj);\n    const getType = type;\n\n    return { getType, getName, getDescription, getPrice, getCourse, getStyle };\n}\n\nconst Food = (obj = {}) => {\n    const course = obj['course']\n\n    const getCourse = () => { return course }\n    // TODO get pieces e.g. for spring rolls\n\n    return { getCourse };\n}\n\nconst Beverage = (obj = {}) => {\n    const style = obj['style'];\n\n    const getStyle = () => { return style }\n\n    return { getStyle };\n}\n\nconst DisplayController = () => {\n\n}\n\nconst main = (() => {\n    const consumable = Consumable({ name: \"Laksa Soup\", description: \"Coconut-based spicy soup\", price: \"20.80\", course: \"Main\"});\n    const consumable0 = Consumable({name: \"Chicken Wing\", description: \"Deep fried specially made chicken wing\", price: \"9.80\", course: \"Starter\"});\n    const consumable1 = Consumable({name: \"Mini Spring Roll\", description: \"Deep fried mini spring rolls, served with sweet chilli sauce\", price: \"10.80\", course: \"Starter\"});\n    const consumable2 = Consumable({name: \"Malay Tofu\", description: \"Crispy yum nom tofu with cucumber, carrots, sesame, sweet chilli sauce. Crispy outside and soft inside\", price: \"12.80\", course: \"Starter\"});\n    // const dummy = Consumable({});\n    // menuController.collectConsumable(dummy);\n    const menuController = MenuController();\n    menuController.collectConsumable(consumable);\n    menuController.collectConsumable(consumable0);\n    menuController.collectConsumable(consumable1);\n    menuController.collectConsumable(consumable2);\n\n    menuController.getFoodCollection()\n        .forEach((obj) => {\n            menuController.makeContainer(obj);\n        })\n\n    return {}\n})();\n\n// a menuController object can run the collectConsumable function belonging to the Menu object\n// how does the resolution work here?\n// inside the menuController function expression, Menu is invoked and assigned to const collectConsumable\n// so if I run menuController.collectConsumable, I return Menu()\n\n//# sourceURL=webpack://restaurant/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;